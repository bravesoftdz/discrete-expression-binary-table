program table;

{$APPTYPE CONSOLE}

uses
	SysUtils, Math;
Type
	TStringArray 	= array of string;
	TVars = array[0..25] of boolean;
const g 	= 	$67;
			a		=		$61;
var suggestion: ansistring;
		VarsCnt: byte;
		i: longint;
function boolToStr(n: boolean):ansistring;
begin
	if n then
		result := '1'
	else
		result := '0';
end;

procedure ErrorCalc(suggestion: ansiString);
begin
	Writeln('Error occurred while calculating "'+suggestion+'"');
end;
function Trim(const S: ansistring): ansistring;
var
	I, L: Integer;
	_result : string;
begin
	L := Length(S);
	I := 1;
	while (I <= L) and ((S[I] = ' ') or (S[I] = '(') or (S[I] = '[')) do Inc(I);
	if I > L then _Result := '' else
	begin
		while (S[L] = ' ') or (S[L] = ')') or (S[L] = ']') do Dec(L);
		_Result := Copy(S, I, L - I + 1);
	end;
	Trim := _result;
end;

function Split(Separator: Char; const Text: ansistring): TStringArray;
var
	i, k, Len	: Integer;
	Count			: Integer;
	_result		: TStringArray;
begin
	if Text = '' then
	begin
		_result := nil;
		Exit;
	end;
	Count := 0;
	Len := Length(Text);
	for i := 1 to Len do
	begin
		if Text[i] = Separator then Inc(Count);
	end;
	SetLength(_result, Count + 1);
	Count := 0;
	k := 1;
	for i := 1 to Len do
	begin
		if Text[i] = Separator then
		begin
			_result[Count] := Copy(Text, k, i - k);
			Inc(Count);
			k := i + 1;
		end;
	end;
	_result[Count] := Copy(Text, k, Len - k + 1);
	Split := _result;
end;

function MaxNesting(suggestion: AnsiString; out IDXl, IDXr : integer) : ansistring;
var
	i, _length	:	integer;
	breaked : boolean;
begin
	breaked := false;
	i := 1; IDXl := 0; IDXr := 0;
	_length := length(suggestion);
	while (i <= _length) and (not breaked) do begin
		if suggestion[i] = '(' then
			IDXl := I;
		if suggestion[i] = ')' then begin
			IDXr := I;
			breaked := true;
		end;
		inc(i);
	end;
	if (IDXl = 0) or (IDXr = 0) then
		MaxNesting := suggestion
	else begin
	setLength(result, IDXr - IDXl + 1);
	_length := length(result);
	for I := 1 to _length do
		result[i] := suggestion[i + IDXl - 1];
	MaxNesting := result;
	end;
end;

function GetVars(suggestion: ansistring): TVars;
var usedVars: TVars;
		i: longint;
begin
	for I := 0 to 25 do
		result[i] := false;
	if length(suggestion) = 1 then begin
		case suggestion[1] of
			'a'..'z': result[ord(suggestion[1]) - $61] := true;
		end;
	end else
	if length(suggestion) = 2 then begin
		case suggestion[1] of
			'a'..'z': case suggestion[2] of
									'a'..'z','0'..'9':;
									 else result[ord(suggestion[1]) - $61] := true;
								end; 
			' ','(' : case suggestion[1] of
									'a'..'z': result[ord(suggestion[2]) - $61] := true;
								end
		end
	end else
	if (suggestion[1] >= 'a') and (suggestion[1] <= 'z') and
		not (((suggestion[2] >= 'a') and (suggestion[2] <= 'z')) or
				 ((suggestion[2] >= '0') and (suggestion[2] <= '9'))) then
		result[ord(suggestion[1]) - $61] := true;
	for I := 2 to length(suggestion) do
		if (suggestion[i] >= 'a') and (suggestion[i] <= 'z') and
			not (((suggestion[i+1] >= 'a') and (suggestion[i+1] <= 'z')) or
					((suggestion[i+1] >= '0') and (suggestion[i+1] <= '9'))) and
			not (((suggestion[i-1] >= 'a') and (suggestion[i-1] <= 'z')) or
					((suggestion[i-1] >= '0') and (suggestion[i-1] <= '9'))) then
			result[ord(suggestion[i]) - $61] := true;
end;

	function calc(suggestion: AnsiString; environ: TVars): boolean;

		function OpDetect(str: ansiString): byte;
		begin
			if str[1] = 'g' then
				result := strtoint(copy(str,2,length(str)-1))
			else
			if str = 'and' then //conjunction
				result := 1
			else
			if str = 'or' then  //disjunction
				result := 7
			else
			if str = '=' then   //equability
				result := 9
			else
			if str = '+' then   //binary addition
				result := 6;
		end;

	var _length, ptr: longint;
			Op: byte;
			x,y: boolean;
			chain: TStringArray;
	begin
		_length := length(suggestion);
		chain := split(' ', suggestion);
		if length(chain) = 1 then begin  //only ident statement
      op := $3;
			case chain[0][1] of
				'a'..'z': x := environ[ord(chain[0][1]) - $61];
				'0'			: x := false;
				'1'			:	x := true;
			end;
		end else
		if length(chain) = 2 then begin //olny NOT X statement
			if chain[0] = 'not' then
				op := $c
			else begin
				ErrorCalc(chain[0]+chain[1]);
				EXIT;
      end;
			case chain[1][1] of
				'a'..'z': x := environ[ord(chain[0][1]) - $61];
				'0'			: x := false;
				'1'			:	x := true;
			end;
		end else
		if length(chain) = 3 then begin
			case chain[0][1] of
				'a'..'z': x := environ[ord(chain[0][1]) - $61];
				'0'			: x := false;
				'1'			:	x := true;
			end;
			case chain[2][1] of
				'a'..'z': y := environ[ord(chain[2][1]) - $61];
				'0'			: y := false;
				'1'			:	y := true;
			end;
			Op := OpDetect(chain[1]);
		end;

		case op of
			$0: result := false;
			$1: result := x and y;
			$2: result := x and not y;
			$3: result := x;
			$4: result := not x and y;
			$5: result := y;
			$6: result := (not x and y) or (x and not y);
			$7: result := x or y;
			$8: result := not x and not y;
			$9: result := x = y;
			$a: result := not y;
			$b: result := x or not y;
			$c: result := not x;
			$d: result := not x or y;
			$e: result := not x or not y;
			$f: result := true;
		end;
	end;

procedure GetTable(Suggestion: ansiString);
var ins: cardinal;
	vars, usedvars: Tvars;
	i,varscnt: byte;
	tmp, outtmp: AnsiString;
	IDXl, IDXr : integer;
begin
ins := 0;
varscnt := 0;
usedVars := GetVars(suggestion);
for I := 0 to 25 do
	if usedVars[i] then
		inc(varsCnt);
outtmp := '';
for I := 0 to 25 do
	if usedVars[i] then
		outtmp := outtmp + chr(i+$61) + ' | ';
outtmp := outtmp + 'F';
writeln(outtmp);
outtmp := '';
for I := 0 to varsCnt * 4 + 1 do
	outtmp := outtmp + '-';
writeln(outtmp);
while ins < trunc(power(2, varsCnt)) do begin
	i := 0;
	while i < varsCnt do
		if usedVars[i] then	begin
			vars[i] := (ins and ($1 shl (varsCnt - i - 1))) <> 0;
			inc(i);
		end;

	tmp := suggestion;
	while (tmp <> '0') or (tmp <> '1') do begin
		tmp := StringReplace(
			tmp,
			MaxNesting(tmp, IDXl, IDXr),
			boolToStr(
				calc(
					Trim(
						MaxNesting(tmp, IDXl, IDXr)),
				vars)),
				[]
			);
	end;
	outtmp := '';
	for I := 0 to 25 do
		if usedVars[i] then
			outtmp := outtmp + boolToStr(vars[i])+' | ';
	outtmp := outtmp + tmp;
	writeln(outtmp);
	inc(ins);

end;
outtmp := '';
for I := 0 to varsCnt * 4 + 1 do
	outtmp := outtmp + '-';
writeln(outtmp);
writeln;
end;

begin

repeat
	readln(suggestion);
	GetTable(suggestion)
until suggestion = ''

end.
