program table;

{$APPTYPE CONSOLE}

uses
	SysUtils, Classes;
type Tvars = array[0..25] of boolean;
const g 	= 	$67;
			a		=		$61;
function GetTable(suggestion: AnsiString):TStrings;

	function calc(suggestion: AnsiString; _vars: TVars): boolean;
	var _length, ptr: longint;
			x,y: boolean;
			Op: byte;
	begin
		_length := length(suggestion);
		if _length < 5 then exit;
		x := _vars[ord(suggestion[1])-$61];
		Op := strtoint(suggestion[3]+suggestion[4]);
		y := _vars[ord(suggestion[5])-$61];
		case op of
			$0: result := false;
			$1: result := x and y;
			$2: result := x and not y;
			$3: result := x;
			$4: result := not x and y;
			$5: result := y;
			$6: result := (not x and y) or (x and not y);
			$7: result := x or y;
			$8: result := not x and not y;
			$9: result := x = y;
			$a: result := not y;
			$b: result := x or not y;
			$c: result := not x;
			$d: result := not x or y;
			$e: result := not x or not y;
			$f: result := true;
		end;
	end;
var UsedVars: Tvars;
		VarsCnt	: byte;

	procedure findVars;
	var i: longint;
	begin
		for I := 0 to 25 do
			UsedVars[i] := false;
		for I := 1 to length(suggestion) do
			case suggestion[i] of
				'a'..'f','h'..'z': UsedVars[ord(Suggestion[i])-$61] := True;
			end;
		VarsCnt := 0;
		for I := 0 to 25 do
			if UsedVars[i] then
				inc(VarsCnt);
	end;

begin
	result := TStrings.Create;
end;

begin
GetTable('ag00b');
end.
